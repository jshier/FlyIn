//
//  MainStoryboardExtensions.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Main", bundle: nil)

private class InitializeBlockObject {
    
    let block: ((UIViewController) -> Void)
    
    init(block: @escaping ((UIViewController) -> Void)) {
        self.block = block
    }
    
}

extension EventDetailsViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ eventDetailsViewController: EventDetailsViewController) -> Void)? = nil) -> EventDetailsViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "EventDetailsViewController") as! EventDetailsViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
}

extension EventsViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ eventsViewController: EventsViewController) -> Void)? = nil) -> EventsViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "ViewController") as! EventsViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    enum SegueIdentifier: String {
        case showEventDetails = "ShowEventDetails"
    }
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
    final func performShowEventDetailsSegue(_ initialize: @escaping ((EventDetailsViewController) -> Void) = {_ in}) {
        let initializeBlock = InitializeBlockObject() {
            initialize($0 as! EventDetailsViewController)
        }
        performSegue(withIdentifier: SegueIdentifier.showEventDetails.rawValue, sender: initializeBlock)
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case event = "EventCell"
    }
    
    final func dequeueEventCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ eventCell: EventTableViewCell) -> Void)? = nil) -> EventTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.event.rawValue, for: indexPath) as! EventTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    // Collection View Cells
    
    enum CollectionViewCellIdentifier: String {
        case dayEvents = "DayEvents"
    }
    
    final func dequeueDayEventsCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ eventsCell: EventsCollectionViewCell) -> Void)? = nil) -> EventsCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.dayEvents.rawValue, for: indexPath) as! EventsCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
}
